Dia 16/10
Ficha 4

data Tree a = Empty | Node a (Tree a) (Tree a)

4.1)
sumTree :: Num a => Tree a -> a

sumTree Empty = 0 
sumTree (Node v l r) = v + sumTree l + sumTree r

4.2)
list :: Tree a -> [a]

list Empty = []
list (Node v l r) = [list r] ++ [v] ++ [list l]

4.3)
level :: Int -> Tree a -> [a]

level x Empty = []
level 0 (Node v _ _) = [v]
level x (Node _ l r) = (level (x-1) l) ++ (level (x-1) r)

4.5)
mapTree :: (a -> b) -> Tree a -> Tree b

mapTree f Empty = Empty
mapTree f (Node v l r) = Node (f v) (mapTree l) (mapTree r)

4.6)
rightMost :: Tree a -> a

rightMost Empty = error "Empty tree"
rightMost (Node v _ Empty) = v
rightMost (Node v l r) = rightMost r

remove :: Ord a => a -> Tree a -> Tree a

remove a Empty = Empty
remove a (Node v l r) = | a == v = (Node (rightMost l) (remove (rightMost l) l) r)
			| a > v  = Node v l (remove a r) 
			| a < v  = Node v (remove a l) r

4.7)
data Expr = Literal Integer | Op Ops Expr Expr
data Ops = Add | Sub | Mul | Div

eval :: Expr -> Integer

eval (Liteal x) = x
eval (op o e1 e2) = case o of 	Add -> eval(e1) + eval(e2)
				Sub -> eval(e1) - eval(e2)
				Mul -> eval(e1) * eval(e2)
				Div -> eval(e1) `div` eval(e2)
				Mod -> eval(e1) `mod` eval(e2)

show :: Expr -> String

show


size :: Expr -> Integer

size
