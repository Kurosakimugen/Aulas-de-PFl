Dia 9/10

3.1)
[f x | x <- xs, p x] => f = função, x <- xs = gerador, p = função para usar no filter
mapFilter :: (a -> b) -> (a -> Bool) -> [a] -> [b]


mapFilter f p xs = map f (filter p xs)

3.2)
dec2Int :: [Integer] -> Integer

dec2Int ds = foldl concatenar 0  ds
	where concatenar acc ele = acc * 10 + ele

3.3)
zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

zipWith f xs ys = 
	f xs [] = []
	f [] ys = []
	f (x : xs) (y : ys) = f x y zipWith f xs ys

3.4)
isort :: Orda => [a] -> [a]

isort xs = foldr insert [] xs

3.7) 
a)
(++) :: [a] -> [a] -> [a]

(++) xs ys = foldr (:) xs ys

b)
concat :: [[a]] -> [a]

concat xs = foldr (++) [] xs

c) 
reverse :: [a] -> [a]

reverse xs = foldr up [] xs
	where up x acc = acc ++ [x]

d) 
reverse xs = foldl (:) [] xs

e) 
elem :: Eq a -> a -> [a] -> Bool

elem y xs = any (== y) xs